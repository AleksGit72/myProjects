"""
# списки
sample = ['Nevada', 'Ohio', 'Colorado']
print(sample)
print(sample[0])
print(sample[1])
print(sample[2])
print(sample[2] + ' is a great city')
print(sample[-1])

# вложенньіе списки
x = [[1, 223], [245, 63, 22]]
print(x[1][0]) # output: 245(0-й елемент підсписку 1)

# срез списка
sample = [12, 32, 21, 24, 65]
print("срез списка", sample[:2])

# конкатенация + дублирование списка
sample = [12, 32, 21, 24, 65]
example = [11, 22, 33]
print(sample*3 + example)

# Операторы логические: in и not in
print('Football' in ['Cricket', 'Football', 'Hockey']) # output: TRUE

# удаление елемента
sample = [2, 3, 4, 6, 8]
del sample[2]
print(sample) # output : [2, 3, 6, 8]

# Метод index() - найти индекс элемента в списке.
x = [32, 23, 12]
print("индекс элемента 23 в списке [32, 23, 12]: ", x.index(23)) # output: 1
# print("индекс элемента 55 в списке [32, 23, 12]: ", x.index(55)) # output: ValueError: 55 is not in list

#Метод insert() 
#СИНТАКСИС: имя_списка.insert(индекс, элемент)
x = [32, 23, 12]
x.insert(2, 11)
print("x.insert(2, 11): елемент 11 вставлен на третью позицию списка [32, 23, 12], output: ", x)

Метод sort():
СИНТАКСИС: 
sort()  - выстроить все элементы списка по возрастанию
sort(reverse = True)  - выстроить все элементы списка по убыванию.

x = [23, 12, 11, 45]
x.sort()
print("выстроить все элементы списка [23, 12, 11, 45] по возрастанию", x)

x = ['USA', 'China', 'Russia', 'UK']
x.sort()
print("выстроить все элементы списка ['USA', 'China', 'Russia', 'UK'] по возрастанию",x)

x = [23, 12, 11, 45]
x.sort(reverse=True)
print("выстроить все элементы списка [23, 12, 11, 45] по убыванию", x)



print(list(chr(x) for x in range(97, 97 + int(input()))))


numbers = [12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324]
print(max(numbers) + min(numbers))


evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
average = sum(evens) / len(evens)
print(average)


rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
rainbow[3, -1] = 'Зеленый', 'Фиолетовый'
print(rainbow)


languages = ['Chinese', 'Spanish', 'English', 'Hindi', 'Arabic', 'Bengali', 'Portuguese', 'Russian', 'Japanese', 'Lahnda']
languages.reverse()
print(languages)


languages = ['Chinese', 'Spanish', 'English', 'Hindi', 'Arabic', 'Bengali', 'Portuguese', 'Russian', 'Japanese', 'Lahnda']
print(languages[::-1])



numbers1 = [1, 2, 3]
numbers2 = [6]
numbers3 = [7, 8, 9, 10, 11, 12, 13]
print(numbers1 * 2 + numbers2 * 9 + numbers3)



numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
print(len(numbers), numbers[-1], numbers[::-1], 'YES' if 5 and 17 in numbers else 'NO', numbers[1:-1], sep='\n')


n = int(input()) # На вход программе подается натуральное число n, а затем n строк. Напишите программу, которая создает из указанных строк список и выводит его.
ls = []
for _ in range(n):
    ls.append(input())
print(ls)

# На вход программе подается натуральное число n, а затем n строк. Напишите программу, которая создает из указанных строк список и выводит его.
print([input() for _ in range(int(input()))]) 

# выводит следующий список:['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', .. Z * 26]
print([chr(i) * (i - 96) for i in range(97, 123)]) 


# На вход программе подаются натуральное число n, а затем n целых чисел. Программа выводит  список, состоящий из кубов введенных чисел
print([int(input()) ** 3 for _ in range(int(input()))]) 


#  программа создает список, состоящий из делителей введенного числа. v1
n = int(input())
list = [1]
for i in range (2, n // 2 + 1):
    if n % i == 0:
        list.append(i)
list.append(n)
print(list)

#  программа создает список, состоящий из делителей введенного числа.
n = int(input())
print([1] + [i for i in range(2, n // 2 + 1) if n % i == 0] + [n])



# На вход программе подаются натуральное число n, а затем n целых чисел. Программа выводит  список, состоящий из сумм соседних чисел
lst = [input() for _ in range(int(input()))]
print([int(lst[i] + lst[i + 1]) for i in range(len(lst) - 1)])


# На вход программе подаются натуральное число n, а затем n целых чисел. Программа удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.
lst = [int(input()) for _ in range(int(input()))]
del lst[1::2]
print(lst)

# На вход программе подаются натуральное число n, а затем n целых чисел. Программа удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.
lst = [int(input()) for _ in range(int(input()))]
print([lst[0]] + [lst[i] for i in range(2,len(lst),2)])

# На вход программе подаются натуральное число n, а затем n целых чисел. Программа удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.
print([int(input()) for _ in range(int(input()))][0::2])

# На вход программе подается натуральное число n,  далее n строк, каждая на отдельной строке. В конце вводится натуральное число k – номер буквы (нумерация начинается с единицы).
# Программа должна вывести текст: k-ую букву из введенных строк на одной строке без пробелов..
# ВАЖНО: Если некоторые строки слишком короткие, и в них нет символа с заданным номером, то такие строки при выводе нужно игнорировать.
lst = [input() for _ in range(int(input()))]
k = int(input())
for i in range(len(lst)):
    if len(lst[i]) >= k:
        print(lst[i][k - 1], end='')



k, lst = int(input()), []
for _ in range(k):
    lst.extend(input())
print(lst)

lst = []
[lst.extend(input()) for _ in range(int(input()))]
print(lst)

print(sum([list(input()) for _ in range(int(input()))], []))


# На вход программе подаются натуральное число n, а затем n целых чисел. 
# Программа удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.
lst = [int(input()) for _ in range(int(input()))]
lst.remove(min(lst))
lst.remove(max(lst))
print(*lst, sep='\n')


# На вход программе подаются натуральное число n, а затем n целых чисел. 
# Программа удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.
lst = [int(input()) for _ in range(int(input()))]
print(*[i for i in lst if i != max(lst) and i != min(lst)], sep = '\n')


# На вход программе подаются натуральное число n, а затем n целых строк.
# Программа выводит только уникальные строки, в том же порядке, в котором они были введены.
lst, out= [input() for _ in range(int(input()))], []
[out.append(i) for i in lst if i not in out]
print(*out, sep='\n')

# На вход программе подаются натуральное число n, а затем n целых строк.
# Программа выводит только уникальные строки, в том же порядке, в котором они были введены.
lst = [input() for _ in range(int(input()))]
print(*[lst[i] for i in range(len(lst)) if lst[:i].count(lst[i]) == 0], sep="\n")


# На вход программе подаются натуральное число строк n, затем сами строки в указанном количестве, затем один поисковый запрос.
# Программа выводит все введенные строки в неизменном виде(!!!), в которых встречается поисковый запрос. 
# Важно(!!!). Поиск не должен быть чувствителен к регистру.
lst, ref = [input() for _ in range(int(input()))], input().lower()
print(*[x for x in lst if ref in x.lower()], sep="\n")

# https://stepik.org/lesson/328948/step/7?unit=312239б через break
# На вход программе подаются натуральное число строк n, затем сами строки в указанном количестве, затем число строк k поисковых запросов, затем сами поисковые строки в указанном количестве .
# Программа выводит все введенные строки в неизменном виде(!!!), в которых встречается одновременно все(!!!) поисковые запросы.. 
# Важно(!!!). Поиск не должен быть чувствителен к регистру.
lst, ref = [input() for _ in range(int(input()))], [input().lower() for _ in range(int(input()))]
for x in lst:
    for y in ref:
        if y not in x.lower():
            break
    else:
        print(x)

# https://stepik.org/lesson/328948/step/7?unit=312239 , через count
# На вход программе подаются натуральное число строк n, затем сами строки в указанном количестве, затем число строк k поисковых запросов, затем сами поисковые строки в указанном количестве .
# Программа выводит все введенные строки в неизменном виде(!!!), в которых встречается одновременно все(!!!) поисковые запросы.. 
# Важно(!!!). Поиск не должен быть чувствителен к регистру.

lst, ref = [input() for _ in range(int(input()))], [input().lower() for _ in range(int(input()))]
for x in lst:
    count = 0
    for y in ref:
        if y in x.lower():
            count +=1
    if count == len(ref):
        print(x)


# На вход программе подаются натуральное число n, а затем n целых чисел. 
# Программа выводит сначала все отрицательные числа, затем нули, а затем все положительные числа, каждое на отдельной строке. 
# Числа должны быть выведены в том же порядке, в котором они были введены.
lst = [int(input()) for _ in range(int(input()))]
print(*[b for b in lst if b < 0], sep='\n')
print(*[b for b in lst if b == 0], sep='\n')
print(*[b for b in lst if b > 0], sep='\n')


numbers = '192.168.1.24'
numbers = numbers.split()
print(numbers)

print(*(input().split()), sep='\n')


# На вход программе подается строка текста, содержащая имя, отчество и фамилию.
# Программа выводит инициалы человека с точкой.
lst = input().split()
print(*[lst[i][0] for i in range(len(lst))], sep='.', end='.')

# На вход программе подается строка текста, содержащая имя, отчество и фамилию.
# Программа выводит инициалы человека с точкой.
print('.'.join([el[0] for el in input().split()]), end='.')

# На вход программе подается одна строка с корректным именем файла в операционной системе Windows.
# Программа разбирает строку на части, разделенные символом "\" и каждую часть выводит на отдельной строке.
print(*[el for el in input().split('\\')], sep='\n')


# На вход программе подается одна строка текста, содержащая целые числа, разделенные символом пробела.
# Программа по заданным числам выводит столбчатую диаграмму.
print(*['+' * int(el) for el in input().split(' ')], sep='\n')


print(*['YES' if 0 < int(el) <= 255 else 'NO' for el in input().split('.')])


# На вход программе подается одна строка текста, содержащая 4 целых неотрицательных числа, разделенных точкой.
# Программа определяет, является ли введенная строка текста корректным ip-адресом.
lst = input().split('.')
for el in lst:
    if  int(el) < 0  or int(el) >= 255:
        print('НЕТ')
        break
else:
    print('ДА')

# На вход программе подается одна строка текста, содержащая 4 целых неотрицательных числа, разделенных точкой.
# Программа определяет, является ли введенная строка текста корректным ip-адресом.
print("ДА") if False not in [(0<=int(el)<=255) for el in input().split(".")] else print("НЕТ")


# На вход программе подается строка текста и строка-разделитель.
# Программа вставляет указанный разделитель между каждым символом введенной строки текста.
lst1, sep = input(), input()
print(sep.join(lst1))

# На вход программе подается строка текста и строка-разделитель.
# Программа вставляет указанный разделитель между каждым символом введенной строки текста.
print(*list(input()),sep=(input()))


# На вход программе подается строка текста, содержащая целые числа.
# Программа подсчитывает, сколько в полученном списке пар элементов, равных друг другу.
# Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
lst, count= input().split(), 0
for i in range(len(lst)):
    for b in range(i + 1, len(lst)):
        if lst[b] == lst[i]:
            count += 1
print(count)


numbers = [8, 9, 10, 11]
numbers[1] = 17
numbers.extend([4, 5, 6])
numbers.pop(0)
numbers.extend(numbers)
numbers.insert(3, 25)
print(numbers)


# На вход программе подается строка текста, содержащая различные(!!!) натуральные числа.
# Из данной строки формируется список чисел
# Программа  меняет местами минимальный и максимальный элемент этого списка.
lst = [int (x) for x in input().split()] # str-->int !!!
i_min, i_max = lst.index(min(lst)), lst.index(max(lst))
lst[i_min], lst[i_max] = lst[i_max], lst[i_min]
print(*lst)


# На вход программе подается строка, содержащая английский текст.
# Программа  подсчитывает общее количество артиклей: 'a', 'an', 'the' без учета регистра(!!!)
lst = input().lower().split()
print('Общее количество артиклей:', lst.count('a') + lst.count('an') + lst.count('the'))


# На первой строке вводится символ решётки и сразу же натуральное число n — количество строк в программе, не считая первой. 
# Далее следует n строк кода.
# Программа выводит те же строки, но удаляет комментарии и символы пустого пространства(пробелы) в конце строк. Пустую строку вместо первой строки ввода выводить не надо(#...).
n, text = input(), []
n=int(n[1:])
for x in range(n) :
    x = input()
    if '#' in x:
        x = x[:x.find('#')] # срез до "#"
        x = x.rstrip() # удаляем все пробелы справа
    text.append(x)
print(*text, sep="\n")



# На вход программе подается строка текста, содержащая целые числа.
# Из данной строки формируется список чисел
# Программа сортирует и выводит данный список сначала по возрастанию, а затем по убыванию.
lst = [int (x) for x in input().split()]
lst.sort()
print(*lst)
lst.sort(reverse=True)
print(*lst)


# На вход программе подается строка текста, содержащая целые числа.
# Из данной строки формируется список чисел
# Программа сортирует и выводит данный список сначала по возрастанию, а затем по убыванию.
lst = [int (x) for x in input().split()]
lst.sort()
print(*lst)
print(*lst[::-1])


# Программа сортирует и выводит список всех целых чисел(!!!)-палиндромов от 100 до 1000 (включительно).
print([x for x in range(100, 1001) if str(x) == str(x)[::-1]])


# На вход программе подается строка текста, содержащая целые числа.
# Программа, использующая списочное выражение, выводит кубы указанных чисел на одной строке.
print(*[int(x) ** 3 for x in input().split()])


print(*[int(x) ** 2 for x in input().split() if int(x) % 2 == 0 and int(x) ** 2 % 10 != 4])

"""
from time import time  # импортируем функцию тайм из модуля тайм
# она возвращает время с начала эпохи (какой то компьютерной)
start = time()  # запоминаем время в начале работы нашей программы
a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
n = len(a)
b = list()
for _ in range(n): 
    c = min(a)
    b.append(c)
    a.remove(c)
print(b)
print(time() - start)  # смотрим сколько времени прошло
